{"version":3,"file":"static/js/216.777cb128.chunk.js","mappings":"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","sources":["pages/CreatePost/CreatePost.tsx"],"sourcesContent":["import React, { useCallback, useState, useEffect } from \"react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { DashboardHeading, Tag } from \"../../components/Heading\";\r\nimport { Field } from \"../../components/Field\";\r\nimport { Label } from \"../../components/Label\";\r\nimport { ImageUpload, Input } from \"../../components/Input\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { DispathType, RootState } from \"../../redux/config\";\r\nimport { Button, Toggle } from \"../../components/Button\";\r\nimport { FormGroup, FormRadio, FormRow } from \"../../components/FormGroup\";\r\nimport { Radio } from \"../../components/Radio\";\r\nimport { Dropdown, List, Option, Select } from \"../../components/Dropdown\";\r\nimport {\r\n  getStorage,\r\n  ref,\r\n  uploadBytesResumable,\r\n  getDownloadURL,\r\n  deleteObject,\r\n} from \"firebase/storage\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  CategoryType,\r\n  createPostApi,\r\n  getCategoriesApi,\r\n  postStatus,\r\n} from \"../../redux/postReducer/postReducer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport slugify from \"slugify\";\r\nimport { EditorText } from \"../../components/Editor\";\r\n\r\ntype Props = {};\r\ntype Values = {\r\n  title: string;\r\n  slug: string;\r\n  author: string | null | undefined;\r\n  status: number;\r\n  category: CategoryType;\r\n  imageName: string;\r\n  hot: boolean;\r\n  content: string;\r\n  categoryId: string;\r\n};\r\n\r\nconst CreatePost = (props: Props) => {\r\n  const currentDate = new Date();\r\n  const formattedDate = currentDate.toLocaleDateString(\"vi-VI\");\r\n  const formattedTime = currentDate.toLocaleTimeString();\r\n\r\n  const dispatch = useDispatch<DispathType>();\r\n  const { categories } = useSelector((state: RootState) => state.postReducer);\r\n  const { userInfo } = useSelector((state: RootState) => state.userReducer);\r\n  const [image, setImage] = useState<string>(\"\");\r\n  const [progress, setProgress] = useState<number>(0);\r\n  const [categoryTag, setCategoryTag] = useState<string | undefined>(undefined);\r\n  const initialValues: Values = {\r\n    title: \"\",\r\n    slug: \"\",\r\n    author: \"\",\r\n    status: 0,\r\n    category: {},\r\n    imageName: \"\",\r\n    hot: false,\r\n    content: \"\",\r\n    categoryId: \"\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getCategoriesApi());\r\n  }, [dispatch]);\r\n\r\n  const handleUpdateImg = useCallback((file: File) => {\r\n    const storage = getStorage();\r\n    const storageRef = ref(storage, \"images/\" + file.name);\r\n    const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n    uploadTask.on(\r\n      \"state_changed\",\r\n      (snapshot) => {\r\n        const progressPercent =\r\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n        setProgress(progressPercent);\r\n        switch (snapshot.state) {\r\n          case \"paused\":\r\n            console.log(\"Upload is paused\");\r\n            break;\r\n          case \"running\":\r\n            console.log(\"Upload is running\");\r\n            break;\r\n          default:\r\n            console.log(\"Nothing at all\");\r\n        }\r\n      },\r\n      (error) => {\r\n        console.log(\"Error\");\r\n      },\r\n      () => {\r\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n          setImage(downloadURL);\r\n        });\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  const handleDeleteImage = useCallback((imageName: string) => {\r\n    const storage = getStorage();\r\n\r\n    const desertRef = ref(storage, \"images/\" + imageName);\r\n\r\n    deleteObject(desertRef)\r\n      .then(() => {\r\n        toast.success(\"Remove image successfully!\");\r\n        setImage(\"\");\r\n        setProgress(0);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"Can not delete image!\");\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"create-post\">\r\n      <DashboardHeading>Create new post</DashboardHeading>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={Yup.object({\r\n          title: Yup.string().required(\"Please enter title!\"),\r\n          category: Yup.object({\r\n            name: Yup.string().required(\"Please select a category!\"),\r\n          }),\r\n          imageName: Yup.string().required(\"Please choose a image!\"),\r\n        })}\r\n        onSubmit={(values, { setSubmitting, resetForm }) => {\r\n          const cloneValues = {\r\n            user: userInfo,\r\n            userId: userInfo?.id || \"\",\r\n            image,\r\n            ...values,\r\n          };\r\n          cloneValues.slug = slugify(values.slug || values.title, {\r\n            lower: true,\r\n          });\r\n          cloneValues.status = Number(values.status);\r\n          cloneValues.author = userInfo.name;\r\n          setTimeout(() => {\r\n            dispatch(\r\n              createPostApi({\r\n                ...cloneValues,\r\n                createAt: formattedTime + \" - \" + formattedDate,\r\n              })\r\n            );\r\n            setSubmitting(false);\r\n            toast.success(\"Create new post successfully!\");\r\n            setImage((prev) => \"\");\r\n            setProgress((prev) => 0);\r\n            setCategoryTag(\"\");\r\n            resetForm();\r\n          }, 500);\r\n        }}\r\n      >\r\n        {({ isSubmitting, values, setFieldValue, errors }) => {\r\n          const watchStatus = values.status;\r\n          const watchHost = values.hot;\r\n          const handleSelectImg = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n            if (e.target.files && e.target.files.length > 0) {\r\n              const file = e.target.files[0];\r\n              if (!file) return;\r\n              setFieldValue(\"imageName\", file.name);\r\n              handleUpdateImg(file);\r\n            }\r\n          };\r\n\r\n          return (\r\n            <Form>\r\n              <FormGroup>\r\n                <Field>\r\n                  <Label htmlFor=\"title\">Title</Label>\r\n                  <Input\r\n                    id=\"title\"\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    placeholder=\"Enter your title\"\r\n                  />\r\n                </Field>\r\n                <Field>\r\n                  <Label htmlFor=\"slug\">Slug</Label>\r\n                  <Input\r\n                    id=\"slug\"\r\n                    type=\"text\"\r\n                    name=\"slug\"\r\n                    placeholder=\"Enter your slug\"\r\n                  />\r\n                </Field>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Field>\r\n                  <Label>Image</Label>\r\n                  <ImageUpload\r\n                    onDeleteImage={() => {\r\n                      handleDeleteImage(values.imageName);\r\n                    }}\r\n                    image={image}\r\n                    name=\"image\"\r\n                    type=\"file\"\r\n                    progress={progress}\r\n                    onChange={handleSelectImg}\r\n                    messError={errors.imageName}\r\n                  />\r\n                </Field>\r\n                <Field>\r\n                  <Label>Category</Label>\r\n                  <Dropdown>\r\n                    <Select\r\n                      placeholder={categoryTag || \"Please select a category\"}\r\n                    />\r\n                    <List>\r\n                      {categories?.map((category) => {\r\n                        return (\r\n                          <Option\r\n                            key={category.id}\r\n                            onClick={() => {\r\n                              setFieldValue(\"category\", { ...category });\r\n                              setFieldValue(\"categoryId\", category.id);\r\n                              setCategoryTag(category.name);\r\n                            }}\r\n                          >\r\n                            {category.name}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                    </List>\r\n                  </Dropdown>\r\n                  {errors.category?.name && (\r\n                    <span className=\"error-massage\">\r\n                      <i className=\"fa-solid fa-circle-exclamation\"></i>{\" \"}\r\n                      {errors.category?.name}\r\n                    </span>\r\n                  )}\r\n                  {!!categoryTag && <Tag>{categoryTag}</Tag>}\r\n                </Field>\r\n              </FormGroup>\r\n              <FormRow>\r\n                <Label>Content</Label>\r\n\r\n                <EditorText control=\"tiny-mce\" name=\"content\" />\r\n              </FormRow>\r\n              <FormGroup>\r\n                <Field>\r\n                  <Label>Feature post</Label>\r\n                  <Toggle type=\"checkbox\" name=\"hot\" on={watchHost}></Toggle>\r\n                </Field>\r\n\r\n                <Field>\r\n                  <Label htmlFor=\"status\">Status</Label>\r\n                  <FormRadio>\r\n                    <Radio\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      value={1}\r\n                      checked={Number(watchStatus) === postStatus.APPROVED}\r\n                    >\r\n                      Approved\r\n                    </Radio>\r\n                    <Radio\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      value={2}\r\n                      checked={Number(watchStatus) === postStatus.PENDING}\r\n                    >\r\n                      Pending\r\n                    </Radio>\r\n                    <Radio\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      value={3}\r\n                      checked={Number(watchStatus) === postStatus.REJECTED}\r\n                    >\r\n                      Reject\r\n                    </Radio>\r\n                  </FormRadio>\r\n                </Field>\r\n              </FormGroup>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"secondary button-loading\"\r\n                height={56}\r\n                isLoading={isSubmitting}\r\n                disabled={isSubmitting}\r\n              >\r\n                Add new post\r\n              </Button>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePost;\r\n"],"names":["props","currentDate","Date","formattedDate","toLocaleDateString","formattedTime","toLocaleTimeString","dispatch","useDispatch","categories","useSelector","state","postReducer","userInfo","userReducer","_useState","useState","_useState2","_slicedToArray","image","setImage","_useState3","_useState4","progress","setProgress","_useState5","undefined","_useState6","categoryTag","setCategoryTag","useEffect","getCategoriesApi","handleUpdateImg","useCallback","file","storage","getStorage","storageRef","ref","name","uploadTask","uploadBytesResumable","on","snapshot","progressPercent","bytesTransferred","totalBytes","console","log","error","getDownloadURL","then","downloadURL","handleDeleteImage","imageName","desertRef","deleteObject","toast","catch","_jsxs","className","children","_jsx","DashboardHeading","Formik","initialValues","title","slug","author","status","category","hot","content","categoryId","validationSchema","Yup","required","onSubmit","values","_ref","setSubmitting","resetForm","cloneValues","_objectSpread","user","userId","id","slugify","lower","Number","setTimeout","createPostApi","createAt","prev","_ref2","_errors$category","_errors$category2","isSubmitting","setFieldValue","errors","watchStatus","watchHost","Form","FormGroup","Field","Label","htmlFor","Input","type","placeholder","ImageUpload","onDeleteImage","onChange","e","target","files","length","messError","Dropdown","Select","List","map","Option","onClick","Tag","FormRow","EditorText","control","Toggle","FormRadio","Radio","value","checked","postStatus","Button","height","isLoading","disabled"],"sourceRoot":""}