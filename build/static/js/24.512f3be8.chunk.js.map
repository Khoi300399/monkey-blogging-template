{"version":3,"file":"static/js/24.512f3be8.chunk.js","mappings":"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","sources":["pages/UpdatePost/UpdatePost.tsx"],"sourcesContent":["import React, { useCallback, useState, useEffect } from \"react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { DashboardHeading, Tag } from \"../../components/Heading\";\r\nimport { Field } from \"../../components/Field\";\r\nimport { Label } from \"../../components/Label\";\r\nimport { ImageUpload, Input } from \"../../components/Input\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { DispathType, RootState } from \"../../redux/config\";\r\nimport { Button, Toggle } from \"../../components/Button\";\r\nimport { FormGroup, FormRadio, FormRow } from \"../../components/FormGroup\";\r\nimport { Radio } from \"../../components/Radio\";\r\nimport { Dropdown, List, Option, Select } from \"../../components/Dropdown\";\r\nimport {\r\n  getStorage,\r\n  ref,\r\n  uploadBytesResumable,\r\n  getDownloadURL,\r\n  deleteObject,\r\n} from \"firebase/storage\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  CategoryType,\r\n  getCategoriesApi,\r\n  postStatus,\r\n  updatePostApi,\r\n} from \"../../redux/postReducer/postReducer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport slugify from \"slugify\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport { EditorText } from \"../../components/Editor\";\r\n\r\ntype Props = {};\r\ntype Values = {\r\n  title: string;\r\n  slug: string;\r\n  author: string | null | undefined;\r\n  status: number;\r\n  category: CategoryType;\r\n  imageName: string;\r\n  hot: boolean;\r\n  content: string;\r\n  categoryId: string;\r\n};\r\n\r\nconst UpdatePost = (props: Props) => {\r\n  const navigate = useNavigate();\r\n  const [params] = useSearchParams();\r\n  const postId = params.get(\"id\");\r\n\r\n  const dispatch = useDispatch<DispathType>();\r\n  const { categories, post } = useSelector(\r\n    (state: RootState) => state.postReducer\r\n  );\r\n  const { userInfo } = useSelector((state: RootState) => state.userReducer);\r\n  const [image, setImage] = useState<string>(post?.image || \"\");\r\n  const [progress, setProgress] = useState<number>(0);\r\n  const [categoryTag, setCategoryTag] = useState<string>(\r\n    post?.category?.name || \"\"\r\n  );\r\n  const initialValues: Values = {\r\n    title: post?.title || \"\",\r\n    slug: post?.slug || \"\",\r\n    author: post?.author || \"\",\r\n    status: post?.status || 0,\r\n    category: post?.category || {},\r\n    imageName: post?.imageName || \"\",\r\n    hot: post?.hot || false,\r\n    content: post?.content || \"\",\r\n    categoryId: \"\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getCategoriesApi());\r\n  }, [dispatch]);\r\n\r\n  const handleUpdateImg = useCallback((file: File) => {\r\n    const storage = getStorage();\r\n    const storageRef = ref(storage, \"images/\" + file.name);\r\n    const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n    uploadTask.on(\r\n      \"state_changed\",\r\n      (snapshot) => {\r\n        const progressPercent =\r\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n        setProgress(progressPercent);\r\n        switch (snapshot.state) {\r\n          case \"paused\":\r\n            console.log(\"Upload is paused\");\r\n            break;\r\n          case \"running\":\r\n            console.log(\"Upload is running\");\r\n            break;\r\n          default:\r\n            console.log(\"Nothing at all\");\r\n        }\r\n      },\r\n      (error) => {\r\n        console.log(\"Error\");\r\n      },\r\n      () => {\r\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n          setImage(downloadURL);\r\n        });\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  const handleDeleteImage = useCallback((imageName: string) => {\r\n    const storage = getStorage();\r\n\r\n    const desertRef = ref(storage, \"images/\" + imageName);\r\n\r\n    deleteObject(desertRef)\r\n      .then(() => {\r\n        toast.success(\"Remove image successfully!\");\r\n        setImage(\"\");\r\n        setProgress(0);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"Can not delete image!\");\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"create-post\">\r\n      <DashboardHeading title={`Update your post ID: ${postId}`}>\r\n        Update post\r\n      </DashboardHeading>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={Yup.object({\r\n          title: Yup.string().required(\"Please enter title!\"),\r\n          category: Yup.object({\r\n            name: Yup.string().required(\"Please select a category!\"),\r\n          }),\r\n          imageName: Yup.string().required(\"Please choose a image!\"),\r\n        })}\r\n        onSubmit={(values, { setSubmitting, resetForm }) => {\r\n          const cloneValues = { user: userInfo, image, ...values };\r\n          cloneValues.slug = slugify(values.slug || values.title, {\r\n            lower: true,\r\n          });\r\n          cloneValues.status = Number(values.status);\r\n          cloneValues.author = userInfo.name;\r\n          console.log(\"cloneValues\", cloneValues);\r\n          setTimeout(() => {\r\n            dispatch(updatePostApi(postId, { ...cloneValues }));\r\n            setSubmitting(false);\r\n            toast.success(\"Update post successfully!\");\r\n            setImage((prev) => \"\");\r\n            setProgress((prev) => 0);\r\n            setCategoryTag(\"\");\r\n            resetForm();\r\n            navigate(\"/post-manage\");\r\n          }, 500);\r\n        }}\r\n      >\r\n        {({ isSubmitting, values, setFieldValue, errors }) => {\r\n          const watchStatus = values.status;\r\n          const watchHost = values.hot;\r\n          const handleSelectImg = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n            if (e.target.files && e.target.files.length > 0) {\r\n              const file = e.target.files[0];\r\n              if (!file) return;\r\n              setFieldValue(\"imageName\", file.name);\r\n              handleUpdateImg(file);\r\n            }\r\n          };\r\n\r\n          return (\r\n            <Form>\r\n              <FormGroup>\r\n                <Field>\r\n                  <Label htmlFor=\"title\">Title</Label>\r\n                  <Input\r\n                    id=\"title\"\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    placeholder=\"Enter your title\"\r\n                  />\r\n                </Field>\r\n                <Field>\r\n                  <Label htmlFor=\"slug\">Slug</Label>\r\n                  <Input\r\n                    id=\"slug\"\r\n                    type=\"text\"\r\n                    name=\"slug\"\r\n                    placeholder=\"Enter your slug\"\r\n                  />\r\n                </Field>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Field>\r\n                  <Label>Image</Label>\r\n                  <ImageUpload\r\n                    trash={!!image}\r\n                    onDeleteImage={() => {\r\n                      handleDeleteImage(values.imageName);\r\n                    }}\r\n                    image={image}\r\n                    name=\"image\"\r\n                    type=\"file\"\r\n                    progress={progress}\r\n                    onChange={handleSelectImg}\r\n                    messError={errors.imageName}\r\n                  />\r\n                </Field>\r\n                <Field>\r\n                  <Label>Category</Label>\r\n                  <Dropdown>\r\n                    <Select\r\n                      placeholder={categoryTag || \"Please select a category\"}\r\n                    />\r\n                    <List>\r\n                      {categories?.map((category) => {\r\n                        return (\r\n                          <Option\r\n                            key={category.id}\r\n                            onClick={() => {\r\n                              setFieldValue(\"category\", { ...category });\r\n                              setFieldValue(\"categoryId\", category.id);\r\n                              setCategoryTag(category.name || \"\");\r\n                            }}\r\n                          >\r\n                            {category.name}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                    </List>\r\n                  </Dropdown>\r\n                  {errors.category?.name && (\r\n                    <span className=\"error-massage\">\r\n                      <i className=\"fa-solid fa-circle-exclamation\"></i>{\" \"}\r\n                      {errors.category?.name}\r\n                    </span>\r\n                  )}\r\n                  {!!categoryTag && <Tag>{categoryTag}</Tag>}\r\n                </Field>\r\n              </FormGroup>\r\n              <FormRow>\r\n                <Label>Content</Label>\r\n                <EditorText control=\"tiny-mce\" name=\"content\" />\r\n              </FormRow>\r\n              <FormGroup>\r\n                <Field>\r\n                  <Label>Feature post</Label>\r\n                  <Toggle type=\"checkbox\" name=\"hot\" on={watchHost}></Toggle>\r\n                </Field>\r\n                <Field>\r\n                  <Label htmlFor=\"status\">Status</Label>\r\n                  <FormRadio>\r\n                    <Radio\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      value={1}\r\n                      checked={Number(watchStatus) === postStatus.APPROVED}\r\n                    >\r\n                      Approved\r\n                    </Radio>\r\n                    <Radio\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      value={2}\r\n                      checked={Number(watchStatus) === postStatus.PENDING}\r\n                    >\r\n                      Pending\r\n                    </Radio>\r\n                    <Radio\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      value={3}\r\n                      checked={Number(watchStatus) === postStatus.REJECTED}\r\n                    >\r\n                      Reject\r\n                    </Radio>\r\n                  </FormRadio>\r\n                </Field>\r\n              </FormGroup>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"secondary button-loading\"\r\n                height={56}\r\n                isLoading={isSubmitting}\r\n                disabled={isSubmitting}\r\n              >\r\n                Update\r\n              </Button>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdatePost;\r\n"],"names":["props","_post$category","navigate","useNavigate","_useSearchParams","useSearchParams","postId","_slicedToArray","get","dispatch","useDispatch","_useSelector","useSelector","state","postReducer","categories","post","userInfo","userReducer","_useState","useState","image","_useState2","setImage","_useState3","_useState4","progress","setProgress","_useState5","category","name","_useState6","categoryTag","setCategoryTag","initialValues","title","slug","author","status","imageName","hot","content","categoryId","useEffect","getCategoriesApi","handleUpdateImg","useCallback","file","storage","getStorage","storageRef","ref","uploadTask","uploadBytesResumable","on","snapshot","progressPercent","bytesTransferred","totalBytes","console","log","error","getDownloadURL","then","downloadURL","handleDeleteImage","desertRef","deleteObject","toast","catch","_jsxs","className","children","_jsx","DashboardHeading","concat","Formik","validationSchema","Yup","required","onSubmit","values","_ref","setSubmitting","resetForm","cloneValues","_objectSpread","user","slugify","lower","Number","setTimeout","updatePostApi","prev","_ref2","_errors$category","_errors$category2","isSubmitting","setFieldValue","errors","watchStatus","watchHost","Form","FormGroup","Field","Label","htmlFor","Input","id","type","placeholder","ImageUpload","trash","onDeleteImage","onChange","e","target","files","length","messError","Dropdown","Select","List","map","Option","onClick","Tag","FormRow","EditorText","control","Toggle","FormRadio","Radio","value","checked","postStatus","Button","height","isLoading","disabled"],"sourceRoot":""}